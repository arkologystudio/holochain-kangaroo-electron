{"version":3,"names":["iosEnterAnimation","baseEl","opts","baseAnimation","createAnimation","wrapperAnimation","position","top","bottom","root","getElementRoot","wrapperEl","querySelector","addElement","fromTo","topPosition","Math","floor","clientHeight","style","easing","duration","addAnimation","iosLeaveAnimation","mdEnterAnimation","mdLeaveAnimation","getAnimationPosition","positionAnchor","mode","toast","offset","win","warnIfAnchorIsHidden","box","getBoundingClientRect","innerHeight","offsetParent","printIonWarning","toastIosCss","toastMdCss","Toast","constructor","hostRef","this","delegateController","createDelegateController","lockController","createLockController","triggerController","createTriggerController","customHTMLEnabled","config","get","ENABLE_HTML_CONTENT_DEFAULT","presented","dispatchCancelHandler","ev","role","detail","isCancel","cancelButton","getButtons","find","b","callButtonHandler","revealContentToScreenReader","overlayIndex","undefined","delegate","hasController","color","enterAnimation","leaveAnimation","cssClass","getNumber","header","layout","message","keyboardClose","buttons","translucent","animated","icon","htmlAttributes","isOpen","trigger","onIsOpenChange","newValue","oldValue","present","dismiss","triggerChanged","el","addClickListener","connectedCallback","prepareOverlay","disconnectedCallback","removeClickListener","componentWillLoad","setOverlayId","componentDidLoad","raf","unlock","lock","attachViewToDom","anchor","getAnchorElement","animationPosition","getIonMode","lastPresentedPosition","durationTimeout","setTimeout","data","_a","_b","clearTimeout","dismissed","removeViewFromDom","onDidDismiss","eventMethod","onWillDismiss","map","text","foundEl","document","getElementById","HTMLElement","buttonClick","button","shouldDismiss","Promise","resolve","handler","rtn","safeCall","e","console","error","renderButtons","side","length","buttonGroupsClasses","h","class","Object","assign","type","buttonClass","tabIndex","onClick","part","buttonPart","slot","renderToastMessage","key","ariaHidden","innerHTML","sanitizeDOMString","renderHeader","render","allButtons","startButtons","filter","endButtons","wrapperClass","Host","tabindex","zIndex","createColorClasses","getClassMap","onIonToastWillDismiss","lazy"],"sources":["../../node_modules/@ionic/core/dist/collection/components/toast/animations/ios.enter.js","../../node_modules/@ionic/core/dist/collection/components/toast/animations/ios.leave.js","../../node_modules/@ionic/core/dist/collection/components/toast/animations/md.enter.js","../../node_modules/@ionic/core/dist/collection/components/toast/animations/md.leave.js","../../node_modules/@ionic/core/dist/collection/components/toast/animations/utils.js","../../node_modules/@ionic/core/dist/collection/components/toast/toast.ios.css?tag=ion-toast&mode=ios&encapsulation=shadow","../../node_modules/@ionic/core/dist/collection/components/toast/toast.md.css?tag=ion-toast&mode=md&encapsulation=shadow","../../node_modules/@ionic/core/dist/collection/components/toast/toast.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { createAnimation } from \"../../../utils/animation/animation\";\nimport { getElementRoot } from \"../../../utils/helpers\";\n/**\n * iOS Toast Enter Animation\n */\nexport const iosEnterAnimation = (baseEl, opts) => {\n  const baseAnimation = createAnimation();\n  const wrapperAnimation = createAnimation();\n  const { position, top, bottom } = opts;\n  const root = getElementRoot(baseEl);\n  const wrapperEl = root.querySelector('.toast-wrapper');\n  wrapperAnimation.addElement(wrapperEl);\n  switch (position) {\n    case 'top':\n      wrapperAnimation.fromTo('transform', 'translateY(-100%)', `translateY(${top})`);\n      break;\n    case 'middle':\n      const topPosition = Math.floor(baseEl.clientHeight / 2 - wrapperEl.clientHeight / 2);\n      wrapperEl.style.top = `${topPosition}px`;\n      wrapperAnimation.fromTo('opacity', 0.01, 1);\n      break;\n    default:\n      wrapperAnimation.fromTo('transform', 'translateY(100%)', `translateY(${bottom})`);\n      break;\n  }\n  return baseAnimation.easing('cubic-bezier(.155,1.105,.295,1.12)').duration(400).addAnimation(wrapperAnimation);\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { createAnimation } from \"../../../utils/animation/animation\";\nimport { getElementRoot } from \"../../../utils/helpers\";\n/**\n * iOS Toast Leave Animation\n */\nexport const iosLeaveAnimation = (baseEl, opts) => {\n  const baseAnimation = createAnimation();\n  const wrapperAnimation = createAnimation();\n  const { position, top, bottom } = opts;\n  const root = getElementRoot(baseEl);\n  const wrapperEl = root.querySelector('.toast-wrapper');\n  wrapperAnimation.addElement(wrapperEl);\n  switch (position) {\n    case 'top':\n      wrapperAnimation.fromTo('transform', `translateY(${top})`, 'translateY(-100%)');\n      break;\n    case 'middle':\n      wrapperAnimation.fromTo('opacity', 0.99, 0);\n      break;\n    default:\n      wrapperAnimation.fromTo('transform', `translateY(${bottom})`, 'translateY(100%)');\n      break;\n  }\n  return baseAnimation.easing('cubic-bezier(.36,.66,.04,1)').duration(300).addAnimation(wrapperAnimation);\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { createAnimation } from \"../../../utils/animation/animation\";\nimport { getElementRoot } from \"../../../utils/helpers\";\n/**\n * MD Toast Enter Animation\n */\nexport const mdEnterAnimation = (baseEl, opts) => {\n  const baseAnimation = createAnimation();\n  const wrapperAnimation = createAnimation();\n  const { position, top, bottom } = opts;\n  const root = getElementRoot(baseEl);\n  const wrapperEl = root.querySelector('.toast-wrapper');\n  wrapperAnimation.addElement(wrapperEl);\n  switch (position) {\n    case 'top':\n      wrapperEl.style.top = top;\n      wrapperAnimation.fromTo('opacity', 0.01, 1);\n      break;\n    case 'middle':\n      const topPosition = Math.floor(baseEl.clientHeight / 2 - wrapperEl.clientHeight / 2);\n      wrapperEl.style.top = `${topPosition}px`;\n      wrapperAnimation.fromTo('opacity', 0.01, 1);\n      break;\n    default:\n      wrapperEl.style.bottom = bottom;\n      wrapperAnimation.fromTo('opacity', 0.01, 1);\n      break;\n  }\n  return baseAnimation.easing('cubic-bezier(.36,.66,.04,1)').duration(400).addAnimation(wrapperAnimation);\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { createAnimation } from \"../../../utils/animation/animation\";\nimport { getElementRoot } from \"../../../utils/helpers\";\n/**\n * md Toast Leave Animation\n */\nexport const mdLeaveAnimation = (baseEl) => {\n  const baseAnimation = createAnimation();\n  const wrapperAnimation = createAnimation();\n  const root = getElementRoot(baseEl);\n  const wrapperEl = root.querySelector('.toast-wrapper');\n  wrapperAnimation.addElement(wrapperEl).fromTo('opacity', 0.99, 0);\n  return baseAnimation.easing('cubic-bezier(.36,.66,.04,1)').duration(300).addAnimation(wrapperAnimation);\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { win } from \"../../../utils/browser/index\";\nimport { printIonWarning } from \"../../../utils/logging/index\";\n/**\n * Calculate the CSS top and bottom position of the toast, to be used\n * as starting points for the animation keyframes.\n *\n * Note that MD animates bottom-positioned toasts using style.bottom,\n * which calculates from the bottom edge of the screen, while iOS uses\n * translateY, which calculates from the top edge of the screen. This\n * is why the bottom calculates differ slightly between modes.\n *\n * @param position The value of the toast's position prop.\n * @param positionAnchor The element the toast should be anchored to,\n * if applicable.\n * @param mode The toast component's mode (md, ios, etc).\n * @param toast A reference to the toast element itself.\n */\nexport function getAnimationPosition(position, positionAnchor, mode, toast) {\n  /**\n   * Start with a predefined offset from the edge the toast will be\n   * positioned relative to, whether on the screen or anchor element.\n   */\n  let offset;\n  if (mode === 'md') {\n    offset = 8;\n  }\n  else {\n    offset = position === 'top' ? 10 : -10;\n  }\n  /**\n   * If positionAnchor is defined, add in the distance from the target\n   * screen edge to the target anchor edge. For position=\"top\", the\n   * bottom anchor edge is targeted. For position=\"bottom\", the top\n   * anchor edge is targeted.\n   */\n  if (positionAnchor && win) {\n    warnIfAnchorIsHidden(positionAnchor, toast);\n    const box = positionAnchor.getBoundingClientRect();\n    if (position === 'top') {\n      offset += box.bottom;\n    }\n    else if (position === 'bottom') {\n      /**\n       * Just box.top is the distance from the top edge of the screen\n       * to the top edge of the anchor. We want to calculate from the\n       * bottom edge of the screen instead.\n       */\n      if (mode === 'md') {\n        offset += win.innerHeight - box.top;\n      }\n      else {\n        offset -= win.innerHeight - box.top;\n      }\n    }\n    /**\n     * We don't include safe area here because that should already be\n     * accounted for when checking the position of the anchor.\n     */\n    return {\n      top: `${offset}px`,\n      bottom: `${offset}px`,\n    };\n  }\n  else {\n    return {\n      top: `calc(${offset}px + var(--ion-safe-area-top, 0px))`,\n      bottom: mode === 'md'\n        ? `calc(${offset}px + var(--ion-safe-area-bottom, 0px))`\n        : `calc(${offset}px - var(--ion-safe-area-bottom, 0px))`,\n    };\n  }\n}\n/**\n * If the anchor element is hidden, getBoundingClientRect()\n * will return all 0s for it, which can cause unexpected\n * results in the position calculation when animating.\n */\nfunction warnIfAnchorIsHidden(positionAnchor, toast) {\n  if (positionAnchor.offsetParent === null) {\n    printIonWarning('The positionAnchor element for ion-toast was found in the DOM, but appears to be hidden. This may lead to unexpected positioning of the toast.', toast);\n  }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n:host {\n  /**\n   * @prop --background: Background of the toast\n   * @prop --color: Color of the toast text\n   *\n   * @prop --border-color: Border color of the toast\n   * @prop --border-radius: Border radius of the toast\n   * @prop --border-width: Border width of the toast\n   * @prop --border-style: Border style of the toast\n   *\n   * @prop --white-space: White space of the toast message\n   *\n   * @prop --box-shadow: Box shadow of the toast\n   *\n   * @prop --min-width: Minimum width of the toast\n   * @prop --width: Width of the toast\n   * @prop --max-width: Maximum width of the toast\n   *\n   * @prop --min-height: Minimum height of the toast\n   * @prop --height: Height of the toast\n   * @prop --max-height: Maximum height of the toast\n   *\n   * @prop --button-color: Color of the button text\n   *\n   * @prop --start: Position from the left if direction is left-to-right, and from the right if direction is right-to-left\n   * @prop --end: Position from the right if direction is left-to-right, and from the left if direction is right-to-left\n   */\n  --border-width: 0;\n  --border-style: none;\n  --border-color: initial;\n  --box-shadow: none;\n  --min-width: auto;\n  --width: auto;\n  --min-height: auto;\n  --height: auto;\n  --max-height: auto;\n  --white-space: normal;\n  top: 0;\n  display: block;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  outline: none;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  contain: strict;\n  z-index: 1001;\n  pointer-events: none;\n}\n@supports (inset-inline-start: 0) {\n  :host {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host {\n    left: 0;\n  }\n  :host-context([dir=rtl]) {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    :host:dir(rtl) {\n      left: unset;\n      right: unset;\n      right: 0;\n    }\n  }\n}\n\n:host(.overlay-hidden) {\n  display: none;\n}\n\n:host(.ion-color) {\n  --button-color: inherit;\n  color: var(--ion-color-contrast);\n}\n\n:host(.ion-color) .toast-button-cancel {\n  color: inherit;\n}\n\n:host(.ion-color) .toast-wrapper {\n  background: var(--ion-color-base);\n}\n\n.toast-wrapper {\n  border-radius: var(--border-radius);\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n  height: var(--height);\n  min-height: var(--min-height);\n  max-height: var(--max-height);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  background: var(--background);\n  box-shadow: var(--box-shadow);\n}\n@supports (inset-inline-start: 0) {\n  .toast-wrapper {\n    inset-inline-start: var(--start);\n    inset-inline-end: var(--end);\n  }\n}\n@supports not (inset-inline-start: 0) {\n  .toast-wrapper {\n    left: var(--start);\n    right: var(--end);\n  }\n  :host-context([dir=rtl]) .toast-wrapper {\n    left: unset;\n    right: unset;\n    left: var(--end);\n    right: var(--start);\n  }\n  [dir=rtl] .toast-wrapper {\n    left: unset;\n    right: unset;\n    left: var(--end);\n    right: var(--start);\n  }\n  @supports selector(:dir(rtl)) {\n    .toast-wrapper:dir(rtl) {\n      left: unset;\n      right: unset;\n      left: var(--end);\n      right: var(--start);\n    }\n  }\n}\n\n.toast-container {\n  display: flex;\n  align-items: center;\n  pointer-events: auto;\n  height: inherit;\n  min-height: inherit;\n  max-height: inherit;\n  contain: content;\n}\n\n.toast-layout-stacked .toast-container {\n  flex-wrap: wrap;\n}\n\n.toast-layout-baseline .toast-content {\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.toast-icon {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n}\n\n.toast-content {\n  min-width: 0;\n}\n\n.toast-message {\n  flex: 1;\n  white-space: var(--white-space);\n}\n\n.toast-button-group {\n  display: flex;\n}\n\n.toast-layout-stacked .toast-button-group {\n  justify-content: end;\n  width: 100%;\n}\n\n.toast-button {\n  border: 0;\n  outline: none;\n  color: var(--button-color);\n  z-index: 0;\n}\n\n.toast-icon,\n.toast-button-icon {\n  font-size: 1.4em;\n}\n\n.toast-button-inner {\n  display: flex;\n  align-items: center;\n}\n\n@media (any-hover: hover) {\n  .toast-button:hover {\n    cursor: pointer;\n  }\n}\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n:host {\n  --background: var(--ion-color-step-50, #f2f2f2);\n  --border-radius: 14px;\n  --button-color: var(--ion-color-primary, #3880ff);\n  --color: var(--ion-color-step-850, #262626);\n  --max-width: 700px;\n  --max-height: 478px;\n  --start: 10px;\n  --end: 10px;\n  font-size: clamp(14px, 0.875rem, 43.4px);\n}\n\n.toast-wrapper {\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: auto;\n  margin-bottom: auto;\n  display: block;\n  position: absolute;\n  z-index: 10;\n}\n\n@supports (backdrop-filter: blur(0)) {\n  :host(.toast-translucent) .toast-wrapper {\n    background: rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8);\n    backdrop-filter: saturate(180%) blur(20px);\n  }\n  :host(.ion-color.toast-translucent) .toast-wrapper {\n    background: rgba(var(--ion-color-base-rgb), 0.8);\n  }\n}\n.toast-wrapper.toast-top {\n  transform: translate3d(0,  -100%,  0);\n  top: 0;\n}\n\n.toast-wrapper.toast-middle {\n  opacity: 0.01;\n}\n\n.toast-wrapper.toast-bottom {\n  transform: translate3d(0,  100%,  0);\n  bottom: 0;\n}\n\n.toast-content {\n  -webkit-padding-start: 15px;\n  padding-inline-start: 15px;\n  -webkit-padding-end: 15px;\n  padding-inline-end: 15px;\n  padding-top: 15px;\n  padding-bottom: 15px;\n}\n\n.toast-header {\n  margin-bottom: 2px;\n  font-weight: 500;\n}\n\n.toast-button {\n  -webkit-padding-start: 15px;\n  padding-inline-start: 15px;\n  -webkit-padding-end: 15px;\n  padding-inline-end: 15px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  min-height: 44px;\n  transition: background-color, opacity 100ms linear;\n  border: 0;\n  background-color: transparent;\n  font-family: var(--ion-font-family);\n  font-size: clamp(17px, 1.0625rem, 21.998px);\n  font-weight: 500;\n  overflow: hidden;\n}\n\n.toast-button.ion-activated {\n  opacity: 0.4;\n}\n\n@media (any-hover: hover) {\n  .toast-button:hover {\n    opacity: 0.6;\n  }\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n:host {\n  /**\n   * @prop --background: Background of the toast\n   * @prop --color: Color of the toast text\n   *\n   * @prop --border-color: Border color of the toast\n   * @prop --border-radius: Border radius of the toast\n   * @prop --border-width: Border width of the toast\n   * @prop --border-style: Border style of the toast\n   *\n   * @prop --white-space: White space of the toast message\n   *\n   * @prop --box-shadow: Box shadow of the toast\n   *\n   * @prop --min-width: Minimum width of the toast\n   * @prop --width: Width of the toast\n   * @prop --max-width: Maximum width of the toast\n   *\n   * @prop --min-height: Minimum height of the toast\n   * @prop --height: Height of the toast\n   * @prop --max-height: Maximum height of the toast\n   *\n   * @prop --button-color: Color of the button text\n   *\n   * @prop --start: Position from the left if direction is left-to-right, and from the right if direction is right-to-left\n   * @prop --end: Position from the right if direction is left-to-right, and from the left if direction is right-to-left\n   */\n  --border-width: 0;\n  --border-style: none;\n  --border-color: initial;\n  --box-shadow: none;\n  --min-width: auto;\n  --width: auto;\n  --min-height: auto;\n  --height: auto;\n  --max-height: auto;\n  --white-space: normal;\n  top: 0;\n  display: block;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  outline: none;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  contain: strict;\n  z-index: 1001;\n  pointer-events: none;\n}\n@supports (inset-inline-start: 0) {\n  :host {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host {\n    left: 0;\n  }\n  :host-context([dir=rtl]) {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    :host:dir(rtl) {\n      left: unset;\n      right: unset;\n      right: 0;\n    }\n  }\n}\n\n:host(.overlay-hidden) {\n  display: none;\n}\n\n:host(.ion-color) {\n  --button-color: inherit;\n  color: var(--ion-color-contrast);\n}\n\n:host(.ion-color) .toast-button-cancel {\n  color: inherit;\n}\n\n:host(.ion-color) .toast-wrapper {\n  background: var(--ion-color-base);\n}\n\n.toast-wrapper {\n  border-radius: var(--border-radius);\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n  height: var(--height);\n  min-height: var(--min-height);\n  max-height: var(--max-height);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  background: var(--background);\n  box-shadow: var(--box-shadow);\n}\n@supports (inset-inline-start: 0) {\n  .toast-wrapper {\n    inset-inline-start: var(--start);\n    inset-inline-end: var(--end);\n  }\n}\n@supports not (inset-inline-start: 0) {\n  .toast-wrapper {\n    left: var(--start);\n    right: var(--end);\n  }\n  :host-context([dir=rtl]) .toast-wrapper {\n    left: unset;\n    right: unset;\n    left: var(--end);\n    right: var(--start);\n  }\n  [dir=rtl] .toast-wrapper {\n    left: unset;\n    right: unset;\n    left: var(--end);\n    right: var(--start);\n  }\n  @supports selector(:dir(rtl)) {\n    .toast-wrapper:dir(rtl) {\n      left: unset;\n      right: unset;\n      left: var(--end);\n      right: var(--start);\n    }\n  }\n}\n\n.toast-container {\n  display: flex;\n  align-items: center;\n  pointer-events: auto;\n  height: inherit;\n  min-height: inherit;\n  max-height: inherit;\n  contain: content;\n}\n\n.toast-layout-stacked .toast-container {\n  flex-wrap: wrap;\n}\n\n.toast-layout-baseline .toast-content {\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.toast-icon {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n}\n\n.toast-content {\n  min-width: 0;\n}\n\n.toast-message {\n  flex: 1;\n  white-space: var(--white-space);\n}\n\n.toast-button-group {\n  display: flex;\n}\n\n.toast-layout-stacked .toast-button-group {\n  justify-content: end;\n  width: 100%;\n}\n\n.toast-button {\n  border: 0;\n  outline: none;\n  color: var(--button-color);\n  z-index: 0;\n}\n\n.toast-icon,\n.toast-button-icon {\n  font-size: 1.4em;\n}\n\n.toast-button-inner {\n  display: flex;\n  align-items: center;\n}\n\n@media (any-hover: hover) {\n  .toast-button:hover {\n    cursor: pointer;\n  }\n}\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n:host {\n  --background: var(--ion-color-step-800, #333333);\n  --border-radius: 4px;\n  --box-shadow: 0 3px 5px -1px rgba(0, 0, 0, 0.2), 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 18px 0 rgba(0, 0, 0, 0.12);\n  --button-color: var(--ion-color-primary, #3880ff);\n  --color: var(--ion-color-step-50, #f2f2f2);\n  --max-width: 700px;\n  --start: 8px;\n  --end: 8px;\n  font-size: 0.875rem;\n}\n\n.toast-wrapper {\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: auto;\n  margin-bottom: auto;\n  display: block;\n  position: absolute;\n  opacity: 0.01;\n  z-index: 10;\n}\n\n.toast-content {\n  -webkit-padding-start: 16px;\n  padding-inline-start: 16px;\n  -webkit-padding-end: 16px;\n  padding-inline-end: 16px;\n  padding-top: 14px;\n  padding-bottom: 14px;\n}\n\n.toast-header {\n  margin-bottom: 2px;\n  font-weight: 500;\n  line-height: 1.25rem;\n}\n\n.toast-message {\n  line-height: 1.25rem;\n}\n\n.toast-layout-baseline .toast-button-group-start {\n  -webkit-margin-start: 8px;\n  margin-inline-start: 8px;\n}\n\n.toast-layout-stacked .toast-button-group-start {\n  -webkit-margin-end: 8px;\n  margin-inline-end: 8px;\n  margin-top: 8px;\n}\n\n.toast-layout-baseline .toast-button-group-end {\n  -webkit-margin-end: 8px;\n  margin-inline-end: 8px;\n}\n\n.toast-layout-stacked .toast-button-group-end {\n  -webkit-margin-end: 8px;\n  margin-inline-end: 8px;\n  margin-bottom: 8px;\n}\n\n.toast-button {\n  -webkit-padding-start: 15px;\n  padding-inline-start: 15px;\n  -webkit-padding-end: 15px;\n  padding-inline-end: 15px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  position: relative;\n  background-color: transparent;\n  font-family: var(--ion-font-family);\n  font-size: 0.875rem;\n  font-weight: 500;\n  letter-spacing: 0.84px;\n  text-transform: uppercase;\n  overflow: hidden;\n}\n\n.toast-button-cancel {\n  color: var(--ion-color-step-100, #e6e6e6);\n}\n\n.toast-button-icon-only {\n  border-radius: 50%;\n  -webkit-padding-start: 9px;\n  padding-inline-start: 9px;\n  -webkit-padding-end: 9px;\n  padding-inline-end: 9px;\n  padding-top: 9px;\n  padding-bottom: 9px;\n  width: 36px;\n  height: 36px;\n}\n\n@media (any-hover: hover) {\n  .toast-button:hover {\n    background-color: rgba(var(--ion-color-primary-rgb, 56, 128, 255), 0.08);\n  }\n  .toast-button-cancel:hover {\n    background-color: rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.08);\n  }\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { h, Host } from \"@stencil/core\";\nimport { ENABLE_HTML_CONTENT_DEFAULT } from \"../../utils/config\";\nimport { raf } from \"../../utils/helpers\";\nimport { createLockController } from \"../../utils/lock-controller\";\nimport { printIonWarning } from \"../../utils/logging/index\";\nimport { createDelegateController, createTriggerController, dismiss, eventMethod, isCancel, prepareOverlay, present, safeCall, setOverlayId, } from \"../../utils/overlays\";\nimport { sanitizeDOMString } from \"../../utils/sanitization/index\";\nimport { createColorClasses, getClassMap } from \"../../utils/theme\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\nimport { iosEnterAnimation } from \"./animations/ios.enter\";\nimport { iosLeaveAnimation } from \"./animations/ios.leave\";\nimport { mdEnterAnimation } from \"./animations/md.enter\";\nimport { mdLeaveAnimation } from \"./animations/md.leave\";\nimport { getAnimationPosition } from \"./animations/utils\";\n// TODO(FW-2832): types\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @part button - Any button element that is displayed inside of the toast.\n * @part button cancel - Any button element with role \"cancel\" that is displayed inside of the toast.\n * @part container - The element that wraps all child elements.\n * @part header - The header text of the toast.\n * @part message - The body text of the toast.\n * @part icon - The icon that appears next to the toast content.\n */\nexport class Toast {\n  constructor() {\n    this.delegateController = createDelegateController(this);\n    this.lockController = createLockController();\n    this.triggerController = createTriggerController();\n    this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n    this.presented = false;\n    this.dispatchCancelHandler = (ev) => {\n      const role = ev.detail.role;\n      if (isCancel(role)) {\n        const cancelButton = this.getButtons().find((b) => b.role === 'cancel');\n        this.callButtonHandler(cancelButton);\n      }\n    };\n    this.revealContentToScreenReader = false;\n    this.overlayIndex = undefined;\n    this.delegate = undefined;\n    this.hasController = false;\n    this.color = undefined;\n    this.enterAnimation = undefined;\n    this.leaveAnimation = undefined;\n    this.cssClass = undefined;\n    this.duration = config.getNumber('toastDuration', 0);\n    this.header = undefined;\n    this.layout = 'baseline';\n    this.message = undefined;\n    this.keyboardClose = false;\n    this.position = 'bottom';\n    this.positionAnchor = undefined;\n    this.buttons = undefined;\n    this.translucent = false;\n    this.animated = true;\n    this.icon = undefined;\n    this.htmlAttributes = undefined;\n    this.isOpen = false;\n    this.trigger = undefined;\n  }\n  onIsOpenChange(newValue, oldValue) {\n    if (newValue === true && oldValue === false) {\n      this.present();\n    }\n    else if (newValue === false && oldValue === true) {\n      this.dismiss();\n    }\n  }\n  triggerChanged() {\n    const { trigger, el, triggerController } = this;\n    if (trigger) {\n      triggerController.addClickListener(el, trigger);\n    }\n  }\n  connectedCallback() {\n    prepareOverlay(this.el);\n    this.triggerChanged();\n  }\n  disconnectedCallback() {\n    this.triggerController.removeClickListener();\n  }\n  componentWillLoad() {\n    setOverlayId(this.el);\n  }\n  componentDidLoad() {\n    /**\n     * If toast was rendered with isOpen=\"true\"\n     * then we should open toast immediately.\n     */\n    if (this.isOpen === true) {\n      raf(() => this.present());\n    }\n  }\n  /**\n   * Present the toast overlay after it has been created.\n   */\n  async present() {\n    const unlock = await this.lockController.lock();\n    await this.delegateController.attachViewToDom();\n    const { el, position } = this;\n    const anchor = this.getAnchorElement();\n    const animationPosition = getAnimationPosition(position, anchor, getIonMode(this), el);\n    /**\n     * Cache the calculated position of the toast, so we can re-use it\n     * in the dismiss animation.\n     */\n    this.lastPresentedPosition = animationPosition;\n    await present(this, 'toastEnter', iosEnterAnimation, mdEnterAnimation, {\n      position,\n      top: animationPosition.top,\n      bottom: animationPosition.bottom,\n    });\n    /**\n     * Content is revealed to screen readers after\n     * the transition to avoid jank since this\n     * state updates will cause a re-render.\n     */\n    this.revealContentToScreenReader = true;\n    if (this.duration > 0) {\n      this.durationTimeout = setTimeout(() => this.dismiss(undefined, 'timeout'), this.duration);\n    }\n    unlock();\n  }\n  /**\n   * Dismiss the toast overlay after it has been presented.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the toast.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the toast.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   */\n  async dismiss(data, role) {\n    var _a, _b;\n    const unlock = await this.lockController.lock();\n    const { durationTimeout, position, lastPresentedPosition } = this;\n    if (durationTimeout) {\n      clearTimeout(durationTimeout);\n    }\n    const dismissed = await dismiss(this, data, role, 'toastLeave', iosLeaveAnimation, mdLeaveAnimation, \n    /**\n     * Fetch the cached position that was calculated back in the present\n     * animation. We always want to animate the dismiss from the same\n     * position the present stopped at, so the animation looks continuous.\n     */\n    {\n      position,\n      top: (_a = lastPresentedPosition === null || lastPresentedPosition === void 0 ? void 0 : lastPresentedPosition.top) !== null && _a !== void 0 ? _a : '',\n      bottom: (_b = lastPresentedPosition === null || lastPresentedPosition === void 0 ? void 0 : lastPresentedPosition.bottom) !== null && _b !== void 0 ? _b : '',\n    });\n    if (dismissed) {\n      this.delegateController.removeViewFromDom();\n      this.revealContentToScreenReader = false;\n    }\n    this.lastPresentedPosition = undefined;\n    unlock();\n    return dismissed;\n  }\n  /**\n   * Returns a promise that resolves when the toast did dismiss.\n   */\n  onDidDismiss() {\n    return eventMethod(this.el, 'ionToastDidDismiss');\n  }\n  /**\n   * Returns a promise that resolves when the toast will dismiss.\n   */\n  onWillDismiss() {\n    return eventMethod(this.el, 'ionToastWillDismiss');\n  }\n  getButtons() {\n    const buttons = this.buttons\n      ? this.buttons.map((b) => {\n        return typeof b === 'string' ? { text: b } : b;\n      })\n      : [];\n    return buttons;\n  }\n  /**\n   * Returns the element specified by the positionAnchor prop,\n   * or undefined if prop's value is an ID string and the element\n   * is not found in the DOM.\n   */\n  getAnchorElement() {\n    const { position, positionAnchor, el } = this;\n    /**\n     * If positionAnchor is undefined then\n     * no anchor should be used when presenting the toast.\n     */\n    if (positionAnchor === undefined) {\n      return;\n    }\n    if (position === 'middle' && positionAnchor !== undefined) {\n      printIonWarning('The positionAnchor property is ignored when using position=\"middle\".', this.el);\n      return undefined;\n    }\n    if (typeof positionAnchor === 'string') {\n      /**\n       * If the anchor is defined as an ID, find the element.\n       * We do this on every present so the toast doesn't need\n       * to account for the surrounding DOM changing since the\n       * last time it was presented.\n       */\n      const foundEl = document.getElementById(positionAnchor);\n      if (foundEl === null) {\n        printIonWarning(`An anchor element with an ID of \"${positionAnchor}\" was not found in the DOM.`, el);\n        return undefined;\n      }\n      return foundEl;\n    }\n    if (positionAnchor instanceof HTMLElement) {\n      return positionAnchor;\n    }\n    printIonWarning('Invalid positionAnchor value:', positionAnchor, el);\n    return undefined;\n  }\n  async buttonClick(button) {\n    const role = button.role;\n    if (isCancel(role)) {\n      return this.dismiss(undefined, role);\n    }\n    const shouldDismiss = await this.callButtonHandler(button);\n    if (shouldDismiss) {\n      return this.dismiss(undefined, role);\n    }\n    return Promise.resolve();\n  }\n  async callButtonHandler(button) {\n    if (button === null || button === void 0 ? void 0 : button.handler) {\n      // a handler has been provided, execute it\n      // pass the handler the values from the inputs\n      try {\n        const rtn = await safeCall(button.handler);\n        if (rtn === false) {\n          // if the return value of the handler is false then do not dismiss\n          return false;\n        }\n      }\n      catch (e) {\n        console.error(e);\n      }\n    }\n    return true;\n  }\n  renderButtons(buttons, side) {\n    if (buttons.length === 0) {\n      return;\n    }\n    const mode = getIonMode(this);\n    const buttonGroupsClasses = {\n      'toast-button-group': true,\n      [`toast-button-group-${side}`]: true,\n    };\n    return (h(\"div\", { class: buttonGroupsClasses }, buttons.map((b) => (h(\"button\", Object.assign({}, b.htmlAttributes, { type: \"button\", class: buttonClass(b), tabIndex: 0, onClick: () => this.buttonClick(b), part: buttonPart(b) }), h(\"div\", { class: \"toast-button-inner\" }, b.icon && (h(\"ion-icon\", { \"aria-hidden\": \"true\", icon: b.icon, slot: b.text === undefined ? 'icon-only' : undefined, class: \"toast-button-icon\" })), b.text), mode === 'md' && (h(\"ion-ripple-effect\", { type: b.icon !== undefined && b.text === undefined ? 'unbounded' : 'bounded' })))))));\n  }\n  /**\n   * Render the `message` property.\n   * @param key - A key to give the element a stable identity. This is used to improve compatibility with screen readers.\n   * @param ariaHidden - If \"true\" then content will be hidden from screen readers.\n   */\n  renderToastMessage(key, ariaHidden = null) {\n    const { customHTMLEnabled, message } = this;\n    if (customHTMLEnabled) {\n      return (h(\"div\", { key: key, \"aria-hidden\": ariaHidden, class: \"toast-message\", part: \"message\", innerHTML: sanitizeDOMString(message) }));\n    }\n    return (h(\"div\", { key: key, \"aria-hidden\": ariaHidden, class: \"toast-message\", part: \"message\" }, message));\n  }\n  /**\n   * Render the `header` property.\n   * @param key - A key to give the element a stable identity. This is used to improve compatibility with screen readers.\n   * @param ariaHidden - If \"true\" then content will be hidden from screen readers.\n   */\n  renderHeader(key, ariaHidden = null) {\n    return (h(\"div\", { key: key, class: \"toast-header\", \"aria-hidden\": ariaHidden, part: \"header\" }, this.header));\n  }\n  render() {\n    const { layout, el, revealContentToScreenReader, header, message } = this;\n    const allButtons = this.getButtons();\n    const startButtons = allButtons.filter((b) => b.side === 'start');\n    const endButtons = allButtons.filter((b) => b.side !== 'start');\n    const mode = getIonMode(this);\n    const wrapperClass = {\n      'toast-wrapper': true,\n      [`toast-${this.position}`]: true,\n      [`toast-layout-${layout}`]: true,\n    };\n    /**\n     * Stacked buttons are only meant to be\n     *  used with one type of button.\n     */\n    if (layout === 'stacked' && startButtons.length > 0 && endButtons.length > 0) {\n      printIonWarning('This toast is using start and end buttons with the stacked toast layout. We recommend following the best practice of using either start or end buttons with the stacked toast layout.', el);\n    }\n    return (h(Host, Object.assign({ tabindex: \"-1\" }, this.htmlAttributes, { style: {\n        zIndex: `${60000 + this.overlayIndex}`,\n      }, class: createColorClasses(this.color, Object.assign(Object.assign({ [mode]: true }, getClassMap(this.cssClass)), { 'overlay-hidden': true, 'toast-translucent': this.translucent })), onIonToastWillDismiss: this.dispatchCancelHandler }), h(\"div\", { class: wrapperClass }, h(\"div\", { class: \"toast-container\", part: \"container\" }, this.renderButtons(startButtons, 'start'), this.icon !== undefined && (h(\"ion-icon\", { class: \"toast-icon\", part: \"icon\", icon: this.icon, lazy: false, \"aria-hidden\": \"true\" })), h(\"div\", { class: \"toast-content\", role: \"status\", \"aria-atomic\": \"true\", \"aria-live\": \"polite\" }, !revealContentToScreenReader && header !== undefined && this.renderHeader('oldHeader', 'true'), !revealContentToScreenReader && message !== undefined && this.renderToastMessage('oldMessage', 'true'), revealContentToScreenReader && header !== undefined && this.renderHeader('header'), revealContentToScreenReader && message !== undefined && this.renderToastMessage('header')), this.renderButtons(endButtons, 'end')))));\n  }\n  static get is() { return \"ion-toast\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"toast.ios.scss\"],\n      \"md\": [\"toast.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"toast.ios.css\"],\n      \"md\": [\"toast.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"overlayIndex\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": true,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"\"\n        },\n        \"attribute\": \"overlay-index\",\n        \"reflect\": false\n      },\n      \"delegate\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"FrameworkDelegate\",\n          \"resolved\": \"FrameworkDelegate | undefined\",\n          \"references\": {\n            \"FrameworkDelegate\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\",\n              \"id\": \"src/interface.d.ts::FrameworkDelegate\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"\"\n        }\n      },\n      \"hasController\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"\"\n        },\n        \"attribute\": \"has-controller\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"color\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Color\",\n          \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n          \"references\": {\n            \"Color\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\",\n              \"id\": \"src/interface.d.ts::Color\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n        },\n        \"attribute\": \"color\",\n        \"reflect\": true\n      },\n      \"enterAnimation\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"AnimationBuilder\",\n          \"resolved\": \"((baseEl: any, opts?: any) => Animation) | undefined\",\n          \"references\": {\n            \"AnimationBuilder\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\",\n              \"id\": \"src/interface.d.ts::AnimationBuilder\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Animation to use when the toast is presented.\"\n        }\n      },\n      \"leaveAnimation\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"AnimationBuilder\",\n          \"resolved\": \"((baseEl: any, opts?: any) => Animation) | undefined\",\n          \"references\": {\n            \"AnimationBuilder\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\",\n              \"id\": \"src/interface.d.ts::AnimationBuilder\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Animation to use when the toast is dismissed.\"\n        }\n      },\n      \"cssClass\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string | string[]\",\n          \"resolved\": \"string | string[] | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Additional classes to apply for custom CSS. If multiple classes are\\nprovided they should be separated by spaces.\"\n        },\n        \"attribute\": \"css-class\",\n        \"reflect\": false\n      },\n      \"duration\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"How many milliseconds to wait before hiding the toast. By default, it will show\\nuntil `dismiss()` is called.\"\n        },\n        \"attribute\": \"duration\",\n        \"reflect\": false,\n        \"defaultValue\": \"config.getNumber('toastDuration', 0)\"\n      },\n      \"header\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Header to be shown in the toast.\"\n        },\n        \"attribute\": \"header\",\n        \"reflect\": false\n      },\n      \"layout\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"ToastLayout\",\n          \"resolved\": \"\\\"baseline\\\" | \\\"stacked\\\"\",\n          \"references\": {\n            \"ToastLayout\": {\n              \"location\": \"import\",\n              \"path\": \"./toast-interface\",\n              \"id\": \"src/components/toast/toast-interface.ts::ToastLayout\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Defines how the message and buttons are laid out in the toast.\\n'baseline': The message and the buttons will appear on the same line.\\nMessage text may wrap within the message container.\\n'stacked': The buttons containers and message will stack on top\\nof each other. Use this if you have long text in your buttons.\"\n        },\n        \"attribute\": \"layout\",\n        \"reflect\": false,\n        \"defaultValue\": \"'baseline'\"\n      },\n      \"message\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string | IonicSafeString\",\n          \"resolved\": \"IonicSafeString | string | undefined\",\n          \"references\": {\n            \"IonicSafeString\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/sanitization\",\n              \"id\": \"src/utils/sanitization/index.ts::IonicSafeString\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Message to be shown in the toast.\\nThis property accepts custom HTML as a string.\\nContent is parsed as plaintext by default.\\n`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config\\nbefore custom HTML can be used.\"\n        },\n        \"attribute\": \"message\",\n        \"reflect\": false\n      },\n      \"keyboardClose\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the keyboard will be automatically dismissed when the overlay is presented.\"\n        },\n        \"attribute\": \"keyboard-close\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"position\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"ToastPosition\",\n          \"resolved\": \"\\\"bottom\\\" | \\\"middle\\\" | \\\"top\\\"\",\n          \"references\": {\n            \"ToastPosition\": {\n              \"location\": \"import\",\n              \"path\": \"./toast-interface\",\n              \"id\": \"src/components/toast/toast-interface.ts::ToastPosition\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The starting position of the toast on the screen. Can be tweaked further\\nusing the `positionAnchor` property.\"\n        },\n        \"attribute\": \"position\",\n        \"reflect\": false,\n        \"defaultValue\": \"'bottom'\"\n      },\n      \"positionAnchor\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"HTMLElement | string\",\n          \"resolved\": \"HTMLElement | string | undefined\",\n          \"references\": {\n            \"HTMLElement\": {\n              \"location\": \"global\",\n              \"id\": \"global::HTMLElement\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The element to anchor the toast's position to. Can be set as a direct reference\\nor the ID of the element. With `position=\\\"bottom\\\"`, the toast will sit above the\\nchosen element. With `position=\\\"top\\\"`, the toast will sit below the chosen element.\\nWith `position=\\\"middle\\\"`, the value of `positionAnchor` is ignored.\"\n        },\n        \"attribute\": \"position-anchor\",\n        \"reflect\": false\n      },\n      \"buttons\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"(ToastButton | string)[]\",\n          \"resolved\": \"(string | ToastButton)[] | undefined\",\n          \"references\": {\n            \"ToastButton\": {\n              \"location\": \"import\",\n              \"path\": \"./toast-interface\",\n              \"id\": \"src/components/toast/toast-interface.ts::ToastButton\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"An array of buttons for the toast.\"\n        }\n      },\n      \"translucent\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the toast will be translucent.\\nOnly applies when the mode is `\\\"ios\\\"` and the device supports\\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).\"\n        },\n        \"attribute\": \"translucent\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"animated\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the toast will animate.\"\n        },\n        \"attribute\": \"animated\",\n        \"reflect\": false,\n        \"defaultValue\": \"true\"\n      },\n      \"icon\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The name of the icon to display, or the path to a valid SVG file. See `ion-icon`.\\nhttps://ionic.io/ionicons\"\n        },\n        \"attribute\": \"icon\",\n        \"reflect\": false\n      },\n      \"htmlAttributes\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"{ [key: string]: any }\",\n          \"resolved\": \"undefined | { [key: string]: any; }\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Additional attributes to pass to the toast.\"\n        }\n      },\n      \"isOpen\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the toast will open. If `false`, the toast will close.\\nUse this if you need finer grained control over presentation, otherwise\\njust use the toastController or the `trigger` property.\\nNote: `isOpen` will not automatically be set back to `false` when\\nthe toast dismisses. You will need to do that in your code.\"\n        },\n        \"attribute\": \"is-open\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"trigger\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string | undefined\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"An ID corresponding to the trigger element that\\ncauses the toast to open when clicked.\"\n        },\n        \"attribute\": \"trigger\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"revealContentToScreenReader\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"didPresent\",\n        \"name\": \"ionToastDidPresent\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted after the toast has presented.\"\n        },\n        \"complexType\": {\n          \"original\": \"void\",\n          \"resolved\": \"void\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"willPresent\",\n        \"name\": \"ionToastWillPresent\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted before the toast has presented.\"\n        },\n        \"complexType\": {\n          \"original\": \"void\",\n          \"resolved\": \"void\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"willDismiss\",\n        \"name\": \"ionToastWillDismiss\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted before the toast has dismissed.\"\n        },\n        \"complexType\": {\n          \"original\": \"OverlayEventDetail\",\n          \"resolved\": \"OverlayEventDetail<any>\",\n          \"references\": {\n            \"OverlayEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/overlays-interface\",\n              \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"didDismiss\",\n        \"name\": \"ionToastDidDismiss\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted after the toast has dismissed.\"\n        },\n        \"complexType\": {\n          \"original\": \"OverlayEventDetail\",\n          \"resolved\": \"OverlayEventDetail<any>\",\n          \"references\": {\n            \"OverlayEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/overlays-interface\",\n              \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"didPresentShorthand\",\n        \"name\": \"didPresent\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted after the toast has presented.\\nShorthand for ionToastWillDismiss.\"\n        },\n        \"complexType\": {\n          \"original\": \"void\",\n          \"resolved\": \"void\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"willPresentShorthand\",\n        \"name\": \"willPresent\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted before the toast has presented.\\nShorthand for ionToastWillPresent.\"\n        },\n        \"complexType\": {\n          \"original\": \"void\",\n          \"resolved\": \"void\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"willDismissShorthand\",\n        \"name\": \"willDismiss\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted before the toast has dismissed.\\nShorthand for ionToastWillDismiss.\"\n        },\n        \"complexType\": {\n          \"original\": \"OverlayEventDetail\",\n          \"resolved\": \"OverlayEventDetail<any>\",\n          \"references\": {\n            \"OverlayEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/overlays-interface\",\n              \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"didDismissShorthand\",\n        \"name\": \"didDismiss\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted after the toast has dismissed.\\nShorthand for ionToastDidDismiss.\"\n        },\n        \"complexType\": {\n          \"original\": \"OverlayEventDetail\",\n          \"resolved\": \"OverlayEventDetail<any>\",\n          \"references\": {\n            \"OverlayEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/overlays-interface\",\n              \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n            }\n          }\n        }\n      }];\n  }\n  static get methods() {\n    return {\n      \"present\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\",\n              \"id\": \"global::Promise\"\n            },\n            \"ToastPresentOptions\": {\n              \"location\": \"import\",\n              \"path\": \"./toast-interface\",\n              \"id\": \"src/components/toast/toast-interface.ts::ToastPresentOptions\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Present the toast overlay after it has been created.\",\n          \"tags\": []\n        }\n      },\n      \"dismiss\": {\n        \"complexType\": {\n          \"signature\": \"(data?: any, role?: string) => Promise<boolean>\",\n          \"parameters\": [{\n              \"tags\": [{\n                  \"name\": \"param\",\n                  \"text\": \"data Any data to emit in the dismiss events.\"\n                }],\n              \"text\": \"Any data to emit in the dismiss events.\"\n            }, {\n              \"tags\": [{\n                  \"name\": \"param\",\n                  \"text\": \"role The role of the element that is dismissing the toast.\\nThis can be useful in a button handler for determining which button was\\nclicked to dismiss the toast.\\nSome examples include: ``\\\"cancel\\\"`, `\\\"destructive\\\"`, \\\"selected\\\"`, and `\\\"backdrop\\\"`.\"\n                }],\n              \"text\": \"The role of the element that is dismissing the toast.\\nThis can be useful in a button handler for determining which button was\\nclicked to dismiss the toast.\\nSome examples include: ``\\\"cancel\\\"`, `\\\"destructive\\\"`, \\\"selected\\\"`, and `\\\"backdrop\\\"`.\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\",\n              \"id\": \"global::Promise\"\n            },\n            \"ToastDismissOptions\": {\n              \"location\": \"import\",\n              \"path\": \"./toast-interface\",\n              \"id\": \"src/components/toast/toast-interface.ts::ToastDismissOptions\"\n            }\n          },\n          \"return\": \"Promise<boolean>\"\n        },\n        \"docs\": {\n          \"text\": \"Dismiss the toast overlay after it has been presented.\",\n          \"tags\": [{\n              \"name\": \"param\",\n              \"text\": \"data Any data to emit in the dismiss events.\"\n            }, {\n              \"name\": \"param\",\n              \"text\": \"role The role of the element that is dismissing the toast.\\nThis can be useful in a button handler for determining which button was\\nclicked to dismiss the toast.\\nSome examples include: ``\\\"cancel\\\"`, `\\\"destructive\\\"`, \\\"selected\\\"`, and `\\\"backdrop\\\"`.\"\n            }]\n        }\n      },\n      \"onDidDismiss\": {\n        \"complexType\": {\n          \"signature\": \"<T = any>() => Promise<OverlayEventDetail<T>>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\",\n              \"id\": \"global::Promise\"\n            },\n            \"OverlayEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/overlays-interface\",\n              \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n            },\n            \"T\": {\n              \"location\": \"global\",\n              \"id\": \"global::T\"\n            }\n          },\n          \"return\": \"Promise<OverlayEventDetail<T>>\"\n        },\n        \"docs\": {\n          \"text\": \"Returns a promise that resolves when the toast did dismiss.\",\n          \"tags\": []\n        }\n      },\n      \"onWillDismiss\": {\n        \"complexType\": {\n          \"signature\": \"<T = any>() => Promise<OverlayEventDetail<T>>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\",\n              \"id\": \"global::Promise\"\n            },\n            \"OverlayEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../utils/overlays-interface\",\n              \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n            },\n            \"T\": {\n              \"location\": \"global\",\n              \"id\": \"global::T\"\n            }\n          },\n          \"return\": \"Promise<OverlayEventDetail<T>>\"\n        },\n        \"docs\": {\n          \"text\": \"Returns a promise that resolves when the toast will dismiss.\",\n          \"tags\": []\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"isOpen\",\n        \"methodName\": \"onIsOpenChange\"\n      }, {\n        \"propName\": \"trigger\",\n        \"methodName\": \"triggerChanged\"\n      }];\n  }\n}\nconst buttonClass = (button) => {\n  return Object.assign({ 'toast-button': true, 'toast-button-icon-only': button.icon !== undefined && button.text === undefined, [`toast-button-${button.role}`]: button.role !== undefined, 'ion-focusable': true, 'ion-activatable': true }, getClassMap(button.cssClass));\n};\nconst buttonPart = (button) => {\n  return isCancel(button.role) ? 'button cancel' : 'button';\n};\n"],"mappings":"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"}