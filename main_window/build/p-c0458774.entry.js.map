{"version":3,"names":["menuIosCss","menuMdCss","iosEasing","mdEasing","iosEasingReverse","mdEasingReverse","focusableQueryString","Menu","constructor","hostRef","this","lastOnEnd","blocker","GESTURE_CONTROLLER","createBlocker","disableScroll","didLoad","operationCancelled","isAnimating","_isOpen","inheritedAttributes","handleFocus","ev","lastOverlay","getPresentedOverlay","document","contains","el","trapKeyboardFocus","isPaneVisible","isEndSide","contentId","undefined","menuId","type","disabled","side","swipeGesture","maxEdgeStart","typeChanged","oldType","contentEl","classList","remove","add","removeAttribute","menuInnerEl","animation","disabledChanged","updateState","ionMenuChange","emit","open","sideChanged","isEnd","swipeGestureChanged","connectedCallback","customElements","whenDefined","config","get","content","getElementById","console","error","menuController","_register","menuChanged","gesture","import","createGesture","gestureName","gesturePriority","threshold","blurOnStart","canStart","onWillStart","onStart","onMove","onEnd","componentWillLoad","inheritAriaAttributes","componentDidLoad","disconnectedCallback","close","destroy","_unregister","onSplitPaneChanged","detail","isPane","onBackdropClick","timeStamp","shouldClose","composedPath","includes","preventDefault","stopPropagation","onKeydown","key","isOpen","Promise","resolve","isActive","_isActive","animated","setOpen","toggle","shouldOpen","_setOpen","focusFirstDescendant","firstInput","querySelector","focus","focusLastDescendant","inputs","Array","from","querySelectorAll","lastInput","length","doc","target","lastFocus","activeElement","beforeAnimation","loadAnimation","startAnimation","afterAnimation","width","offsetWidth","_createAnimation","getBoolean","duration","fill","isReversed","mode","getIonMode","easing","easingReverse","ani","direction","play","sync","getDirection","canSwipe","isModalPresented","_getOpenSync","checkEdgeSide","window","currentX","assert","progressStart","delta","computeDelta","deltaX","stepValue","progressStep","velocity","velocityX","z","shouldCompleteRight","shouldCompleteLeft","shouldComplete","currentTime","newStepValue","adjustedStepValue","getTimeGivenProgression","clamp","playTo","onFinish","oneTimeCallback","progressEnd","SHOW_MENU","setAttribute","backdropEl","SHOW_BACKDROP","MENU_CONTENT_OPEN","block","ionWillOpen","ionWillClose","_a","unblock","ionDidOpen","focusedMenu","closest","addEventListener","stop","ionDidClose","removeEventListener","enable","render","h","Host","role","class","part","ref","tappable","Math","max","win","posX","innerWidth"],"sources":["../../node_modules/@ionic/core/dist/collection/components/menu/menu.ios.css?tag=ion-menu&mode=ios&encapsulation=shadow","../../node_modules/@ionic/core/dist/collection/components/menu/menu.md.css?tag=ion-menu&mode=md&encapsulation=shadow","../../node_modules/@ionic/core/dist/collection/components/menu/menu.js"],"sourcesContent":["/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n:host {\n  /**\n   * @prop --background: Background of the menu\n   *\n   * @prop --min-width: Minimum width of the menu\n   * @prop --width: Width of the menu\n   * @prop --max-width: Maximum width of the menu\n   *\n   * @prop --min-height: Minimum height of the menu\n   * @prop --height: Height of the menu\n   * @prop --max-height: Maximum height of the menu\n   */\n  --width: 304px;\n  --min-width: auto;\n  --max-width: auto;\n  --height: 100%;\n  --min-height: auto;\n  --max-height: auto;\n  --background: var(--ion-background-color, #fff);\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: none;\n  position: absolute;\n  contain: strict;\n}\n\n:host(.show-menu) {\n  display: block;\n}\n\n.menu-inner {\n  transform: translateX(-9999px);\n  display: flex;\n  position: absolute;\n  flex-direction: column;\n  justify-content: space-between;\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n  height: var(--height);\n  min-height: var(--min-height);\n  max-height: var(--max-height);\n  background: var(--background);\n  contain: strict;\n}\n\n:host(.menu-side-start) .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * LTR:\n    * The left side of the menu touches the screen edge. The safe area padding has\n    * already been set in the core styles, so there's no need to set it again.\n    * The right side of the menu is not touching the screen edge. Padding is not\n    * applied to the right side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-right: 0px;\n  top: 0;\n  bottom: 0;\n}\n@supports (inset-inline-start: 0) {\n  :host(.menu-side-start) .menu-inner {\n    inset-inline-start: 0;\n    inset-inline-end: auto;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host(.menu-side-start) .menu-inner {\n    left: 0;\n    right: auto;\n  }\n  :host-context([dir=rtl]):host(.menu-side-start) .menu-inner, :host-context([dir=rtl]).menu-side-start .menu-inner {\n    left: unset;\n    right: unset;\n    left: auto;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(.menu-side-start) .menu-inner:dir(rtl) {\n      left: unset;\n      right: unset;\n      left: auto;\n      right: 0;\n    }\n  }\n}\n:host-context([dir=rtl]):host(.menu-side-start) .menu-inner, :host-context([dir=rtl]).menu-side-start .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * RTL:\n    * The right side of the menu touches the screen edge.\n    * The right side needs to revert back to the default value that was set in the core styles, so we unset it here.\n    * This would keep the variable consistent with the core styles.\n    * Additionally, it would continue to allow users to override the variable if they choose to.\n    * The left side of the menu is not touching the screen edge. Padding is not\n    * applied to the left side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-right: unset;\n  --ion-safe-area-left: 0px;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.menu-side-start) .menu-inner:dir(rtl) {\n    /**\n      * Menu does not cover the whole screen so we need to set the safe area for the\n      * side that touches the screen edge only. Since safe area is not logical, it\n      * needs to be applied to the correct side depending on the language direction.\n      * Otherwise, the content will have less space on both sides.\n      *\n      * RTL:\n      * The right side of the menu touches the screen edge.\n      * The right side needs to revert back to the default value that was set in the core styles, so we unset it here.\n      * This would keep the variable consistent with the core styles.\n      * Additionally, it would continue to allow users to override the variable if they choose to.\n      * The left side of the menu is not touching the screen edge. Padding is not\n      * applied to the left side of the menu. A value of 0 is set.\n      */\n    --ion-safe-area-right: unset;\n    --ion-safe-area-left: 0px;\n  }\n}\n\n:host(.menu-side-end) .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * LTR:\n    * The right side of the menu touches the screen edge. The safe area padding has\n    * already been set in the core styles, so there's no need to set it again.\n    * The left side of the menu is not touching the screen edge. Padding is not\n    * applied to the left side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-left: 0px;\n  top: 0;\n  bottom: 0;\n}\n@supports (inset-inline-start: 0) {\n  :host(.menu-side-end) .menu-inner {\n    inset-inline-start: auto;\n    inset-inline-end: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host(.menu-side-end) .menu-inner {\n    left: auto;\n    right: 0;\n  }\n  :host-context([dir=rtl]):host(.menu-side-end) .menu-inner, :host-context([dir=rtl]).menu-side-end .menu-inner {\n    left: unset;\n    right: unset;\n    left: 0;\n    right: auto;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(.menu-side-end) .menu-inner:dir(rtl) {\n      left: unset;\n      right: unset;\n      left: 0;\n      right: auto;\n    }\n  }\n}\n:host-context([dir=rtl]):host(.menu-side-end) .menu-inner, :host-context([dir=rtl]).menu-side-end .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * RTL:\n    * The left side of the menu touches the screen edge.\n    * The left side needs to revert back to the default value that was set in the core styles, so we unset it here.\n    * This would keep the variable consistent with the core styles.\n    * Additionally, it would continue to allow users to override the variable if they choose to.\n    * The right side of the menu is not touching the screen edge. Padding is not\n    * applied to the right side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-left: unset;\n  --ion-safe-area-right: 0px;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.menu-side-end) .menu-inner:dir(rtl) {\n    /**\n      * Menu does not cover the whole screen so we need to set the safe area for the\n      * side that touches the screen edge only. Since safe area is not logical, it\n      * needs to be applied to the correct side depending on the language direction.\n      * Otherwise, the content will have less space on both sides.\n      *\n      * RTL:\n      * The left side of the menu touches the screen edge.\n      * The left side needs to revert back to the default value that was set in the core styles, so we unset it here.\n      * This would keep the variable consistent with the core styles.\n      * Additionally, it would continue to allow users to override the variable if they choose to.\n      * The right side of the menu is not touching the screen edge. Padding is not\n      * applied to the right side of the menu. A value of 0 is set.\n      */\n    --ion-safe-area-left: unset;\n    --ion-safe-area-right: 0px;\n  }\n}\n\nion-backdrop {\n  display: none;\n  opacity: 0.01;\n  z-index: -1;\n}\n\n@media (max-width: 340px) {\n  .menu-inner {\n    --width: 264px;\n  }\n}\n:host(.menu-type-reveal) {\n  z-index: 0;\n}\n\n:host(.menu-type-reveal.show-menu) .menu-inner {\n  transform: translate3d(0,  0,  0);\n}\n\n:host(.menu-type-overlay) {\n  z-index: 1000;\n}\n\n:host(.menu-type-overlay) .show-backdrop {\n  display: block;\n  cursor: pointer;\n}\n\n:host(.menu-pane-visible) {\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n}\n\n:host(.menu-pane-visible) .menu-inner {\n  left: 0;\n  right: 0;\n  width: auto;\n  /* stylelint-disable declaration-no-important */\n  transform: none !important;\n  box-shadow: none !important;\n}\n\n:host(.menu-pane-visible) ion-backdrop {\n  display: hidden !important;\n  /* stylelint-enable declaration-no-important */\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n:host(.menu-type-push) {\n  z-index: 1000;\n}\n\n:host(.menu-type-push) .show-backdrop {\n  display: block;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n:host {\n  /**\n   * @prop --background: Background of the menu\n   *\n   * @prop --min-width: Minimum width of the menu\n   * @prop --width: Width of the menu\n   * @prop --max-width: Maximum width of the menu\n   *\n   * @prop --min-height: Minimum height of the menu\n   * @prop --height: Height of the menu\n   * @prop --max-height: Maximum height of the menu\n   */\n  --width: 304px;\n  --min-width: auto;\n  --max-width: auto;\n  --height: 100%;\n  --min-height: auto;\n  --max-height: auto;\n  --background: var(--ion-background-color, #fff);\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: none;\n  position: absolute;\n  contain: strict;\n}\n\n:host(.show-menu) {\n  display: block;\n}\n\n.menu-inner {\n  transform: translateX(-9999px);\n  display: flex;\n  position: absolute;\n  flex-direction: column;\n  justify-content: space-between;\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n  height: var(--height);\n  min-height: var(--min-height);\n  max-height: var(--max-height);\n  background: var(--background);\n  contain: strict;\n}\n\n:host(.menu-side-start) .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * LTR:\n    * The left side of the menu touches the screen edge. The safe area padding has\n    * already been set in the core styles, so there's no need to set it again.\n    * The right side of the menu is not touching the screen edge. Padding is not\n    * applied to the right side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-right: 0px;\n  top: 0;\n  bottom: 0;\n}\n@supports (inset-inline-start: 0) {\n  :host(.menu-side-start) .menu-inner {\n    inset-inline-start: 0;\n    inset-inline-end: auto;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host(.menu-side-start) .menu-inner {\n    left: 0;\n    right: auto;\n  }\n  :host-context([dir=rtl]):host(.menu-side-start) .menu-inner, :host-context([dir=rtl]).menu-side-start .menu-inner {\n    left: unset;\n    right: unset;\n    left: auto;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(.menu-side-start) .menu-inner:dir(rtl) {\n      left: unset;\n      right: unset;\n      left: auto;\n      right: 0;\n    }\n  }\n}\n:host-context([dir=rtl]):host(.menu-side-start) .menu-inner, :host-context([dir=rtl]).menu-side-start .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * RTL:\n    * The right side of the menu touches the screen edge.\n    * The right side needs to revert back to the default value that was set in the core styles, so we unset it here.\n    * This would keep the variable consistent with the core styles.\n    * Additionally, it would continue to allow users to override the variable if they choose to.\n    * The left side of the menu is not touching the screen edge. Padding is not\n    * applied to the left side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-right: unset;\n  --ion-safe-area-left: 0px;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.menu-side-start) .menu-inner:dir(rtl) {\n    /**\n      * Menu does not cover the whole screen so we need to set the safe area for the\n      * side that touches the screen edge only. Since safe area is not logical, it\n      * needs to be applied to the correct side depending on the language direction.\n      * Otherwise, the content will have less space on both sides.\n      *\n      * RTL:\n      * The right side of the menu touches the screen edge.\n      * The right side needs to revert back to the default value that was set in the core styles, so we unset it here.\n      * This would keep the variable consistent with the core styles.\n      * Additionally, it would continue to allow users to override the variable if they choose to.\n      * The left side of the menu is not touching the screen edge. Padding is not\n      * applied to the left side of the menu. A value of 0 is set.\n      */\n    --ion-safe-area-right: unset;\n    --ion-safe-area-left: 0px;\n  }\n}\n\n:host(.menu-side-end) .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * LTR:\n    * The right side of the menu touches the screen edge. The safe area padding has\n    * already been set in the core styles, so there's no need to set it again.\n    * The left side of the menu is not touching the screen edge. Padding is not\n    * applied to the left side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-left: 0px;\n  top: 0;\n  bottom: 0;\n}\n@supports (inset-inline-start: 0) {\n  :host(.menu-side-end) .menu-inner {\n    inset-inline-start: auto;\n    inset-inline-end: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host(.menu-side-end) .menu-inner {\n    left: auto;\n    right: 0;\n  }\n  :host-context([dir=rtl]):host(.menu-side-end) .menu-inner, :host-context([dir=rtl]).menu-side-end .menu-inner {\n    left: unset;\n    right: unset;\n    left: 0;\n    right: auto;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(.menu-side-end) .menu-inner:dir(rtl) {\n      left: unset;\n      right: unset;\n      left: 0;\n      right: auto;\n    }\n  }\n}\n:host-context([dir=rtl]):host(.menu-side-end) .menu-inner, :host-context([dir=rtl]).menu-side-end .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * RTL:\n    * The left side of the menu touches the screen edge.\n    * The left side needs to revert back to the default value that was set in the core styles, so we unset it here.\n    * This would keep the variable consistent with the core styles.\n    * Additionally, it would continue to allow users to override the variable if they choose to.\n    * The right side of the menu is not touching the screen edge. Padding is not\n    * applied to the right side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-left: unset;\n  --ion-safe-area-right: 0px;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.menu-side-end) .menu-inner:dir(rtl) {\n    /**\n      * Menu does not cover the whole screen so we need to set the safe area for the\n      * side that touches the screen edge only. Since safe area is not logical, it\n      * needs to be applied to the correct side depending on the language direction.\n      * Otherwise, the content will have less space on both sides.\n      *\n      * RTL:\n      * The left side of the menu touches the screen edge.\n      * The left side needs to revert back to the default value that was set in the core styles, so we unset it here.\n      * This would keep the variable consistent with the core styles.\n      * Additionally, it would continue to allow users to override the variable if they choose to.\n      * The right side of the menu is not touching the screen edge. Padding is not\n      * applied to the right side of the menu. A value of 0 is set.\n      */\n    --ion-safe-area-left: unset;\n    --ion-safe-area-right: 0px;\n  }\n}\n\nion-backdrop {\n  display: none;\n  opacity: 0.01;\n  z-index: -1;\n}\n\n@media (max-width: 340px) {\n  .menu-inner {\n    --width: 264px;\n  }\n}\n:host(.menu-type-reveal) {\n  z-index: 0;\n}\n\n:host(.menu-type-reveal.show-menu) .menu-inner {\n  transform: translate3d(0,  0,  0);\n}\n\n:host(.menu-type-overlay) {\n  z-index: 1000;\n}\n\n:host(.menu-type-overlay) .show-backdrop {\n  display: block;\n  cursor: pointer;\n}\n\n:host(.menu-pane-visible) {\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n}\n\n:host(.menu-pane-visible) .menu-inner {\n  left: 0;\n  right: 0;\n  width: auto;\n  /* stylelint-disable declaration-no-important */\n  transform: none !important;\n  box-shadow: none !important;\n}\n\n:host(.menu-pane-visible) ion-backdrop {\n  display: hidden !important;\n  /* stylelint-enable declaration-no-important */\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n:host(.menu-type-overlay) .menu-inner {\n  box-shadow: 4px 0px 16px rgba(0, 0, 0, 0.18);\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Build, Host, h } from \"@stencil/core\";\nimport { getTimeGivenProgression } from \"../../utils/animation/cubic-bezier\";\nimport { GESTURE_CONTROLLER } from \"../../utils/gesture/index\";\nimport { inheritAriaAttributes, assert, clamp, isEndSide as isEnd } from \"../../utils/helpers\";\nimport { menuController } from \"../../utils/menu-controller/index\";\nimport { getPresentedOverlay } from \"../../utils/overlays\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\nconst iosEasing = 'cubic-bezier(0.32,0.72,0,1)';\nconst mdEasing = 'cubic-bezier(0.0,0.0,0.2,1)';\nconst iosEasingReverse = 'cubic-bezier(1, 0, 0.68, 0.28)';\nconst mdEasingReverse = 'cubic-bezier(0.4, 0, 0.6, 1)';\nconst focusableQueryString = '[tabindex]:not([tabindex^=\"-\"]), input:not([type=hidden]):not([tabindex^=\"-\"]), textarea:not([tabindex^=\"-\"]), button:not([tabindex^=\"-\"]), select:not([tabindex^=\"-\"]), .ion-focusable:not([tabindex^=\"-\"])';\n/**\n * @part container - The container for the menu content.\n * @part backdrop - The backdrop that appears over the main content when the menu is open.\n */\nexport class Menu {\n  constructor() {\n    this.lastOnEnd = 0;\n    this.blocker = GESTURE_CONTROLLER.createBlocker({ disableScroll: true });\n    this.didLoad = false;\n    /**\n     * Flag used to determine if an open/close\n     * operation was cancelled. For example, if\n     * an app calls \"menu.open\" then disables the menu\n     * part way through the animation, then this would\n     * be considered a cancelled operation.\n     */\n    this.operationCancelled = false;\n    this.isAnimating = false;\n    this._isOpen = false;\n    this.inheritedAttributes = {};\n    this.handleFocus = (ev) => {\n      /**\n       * Overlays have their own focus trapping listener\n       * so we do not want the two listeners to conflict\n       * with each other. If the top-most overlay that is\n       * open does not contain this ion-menu, then ion-menu's\n       * focus trapping should not run.\n       */\n      const lastOverlay = getPresentedOverlay(document);\n      if (lastOverlay && !lastOverlay.contains(this.el)) {\n        return;\n      }\n      this.trapKeyboardFocus(ev, document);\n    };\n    this.isPaneVisible = false;\n    this.isEndSide = false;\n    this.contentId = undefined;\n    this.menuId = undefined;\n    this.type = undefined;\n    this.disabled = false;\n    this.side = 'start';\n    this.swipeGesture = true;\n    this.maxEdgeStart = 50;\n  }\n  typeChanged(type, oldType) {\n    const contentEl = this.contentEl;\n    if (contentEl) {\n      if (oldType !== undefined) {\n        contentEl.classList.remove(`menu-content-${oldType}`);\n      }\n      contentEl.classList.add(`menu-content-${type}`);\n      contentEl.removeAttribute('style');\n    }\n    if (this.menuInnerEl) {\n      // Remove effects of previous animations\n      this.menuInnerEl.removeAttribute('style');\n    }\n    this.animation = undefined;\n  }\n  disabledChanged() {\n    this.updateState();\n    this.ionMenuChange.emit({\n      disabled: this.disabled,\n      open: this._isOpen,\n    });\n  }\n  sideChanged() {\n    this.isEndSide = isEnd(this.side);\n    /**\n     * Menu direction animation is calculated based on the document direction.\n     * If the document direction changes, we need to create a new animation.\n     */\n    this.animation = undefined;\n  }\n  swipeGestureChanged() {\n    this.updateState();\n  }\n  async connectedCallback() {\n    // TODO: connectedCallback is fired in CE build\n    // before WC is defined. This needs to be fixed in Stencil.\n    if (typeof customElements !== 'undefined' && customElements != null) {\n      await customElements.whenDefined('ion-menu');\n    }\n    if (this.type === undefined) {\n      this.type = config.get('menuType', 'overlay');\n    }\n    if (!Build.isBrowser) {\n      return;\n    }\n    const content = this.contentId !== undefined ? document.getElementById(this.contentId) : null;\n    if (content === null) {\n      console.error('Menu: must have a \"content\" element to listen for drag events on.');\n      return;\n    }\n    if (this.el.contains(content)) {\n      console.error(`Menu: \"contentId\" should refer to the main view's ion-content, not the ion-content inside of the ion-menu.`);\n    }\n    this.contentEl = content;\n    // add menu's content classes\n    content.classList.add('menu-content');\n    this.typeChanged(this.type, undefined);\n    this.sideChanged();\n    // register this menu with the app's menu controller\n    menuController._register(this);\n    this.menuChanged();\n    this.gesture = (await import('../../utils/gesture')).createGesture({\n      el: document,\n      gestureName: 'menu-swipe',\n      gesturePriority: 30,\n      threshold: 10,\n      blurOnStart: true,\n      canStart: (ev) => this.canStart(ev),\n      onWillStart: () => this.onWillStart(),\n      onStart: () => this.onStart(),\n      onMove: (ev) => this.onMove(ev),\n      onEnd: (ev) => this.onEnd(ev),\n    });\n    this.updateState();\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAriaAttributes(this.el);\n  }\n  async componentDidLoad() {\n    this.didLoad = true;\n    this.menuChanged();\n    this.updateState();\n  }\n  menuChanged() {\n    /**\n     * Inform dependent components such as ion-menu-button\n     * that the menu is ready. Note that we only want to do this\n     * once the menu has been rendered which is why we check for didLoad.\n     */\n    if (this.didLoad) {\n      this.ionMenuChange.emit({ disabled: this.disabled, open: this._isOpen });\n    }\n  }\n  async disconnectedCallback() {\n    /**\n     * The menu should be closed when it is\n     * unmounted from the DOM.\n     * This is an async call, so we need to wait for\n     * this to finish otherwise contentEl\n     * will not have MENU_CONTENT_OPEN removed.\n     */\n    await this.close(false);\n    this.blocker.destroy();\n    menuController._unregister(this);\n    if (this.animation) {\n      this.animation.destroy();\n    }\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    this.animation = undefined;\n    this.contentEl = undefined;\n  }\n  onSplitPaneChanged(ev) {\n    this.isPaneVisible = ev.detail.isPane(this.el);\n    this.updateState();\n  }\n  onBackdropClick(ev) {\n    // TODO(FW-2832): type (CustomEvent triggers errors which should be sorted)\n    if (this._isOpen && this.lastOnEnd < ev.timeStamp - 100) {\n      const shouldClose = ev.composedPath ? !ev.composedPath().includes(this.menuInnerEl) : false;\n      if (shouldClose) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.close();\n      }\n    }\n  }\n  onKeydown(ev) {\n    if (ev.key === 'Escape') {\n      this.close();\n    }\n  }\n  /**\n   * Returns `true` is the menu is open.\n   */\n  isOpen() {\n    return Promise.resolve(this._isOpen);\n  }\n  /**\n   * Returns `true` is the menu is active.\n   *\n   * A menu is active when it can be opened or closed, meaning it's enabled\n   * and it's not part of a `ion-split-pane`.\n   */\n  isActive() {\n    return Promise.resolve(this._isActive());\n  }\n  /**\n   * Opens the menu. If the menu is already open or it can't be opened,\n   * it returns `false`.\n   */\n  open(animated = true) {\n    return this.setOpen(true, animated);\n  }\n  /**\n   * Closes the menu. If the menu is already closed or it can't be closed,\n   * it returns `false`.\n   */\n  close(animated = true) {\n    return this.setOpen(false, animated);\n  }\n  /**\n   * Toggles the menu. If the menu is already open, it will try to close, otherwise it will try to open it.\n   * If the operation can't be completed successfully, it returns `false`.\n   */\n  toggle(animated = true) {\n    return this.setOpen(!this._isOpen, animated);\n  }\n  /**\n   * Opens or closes the button.\n   * If the operation can't be completed successfully, it returns `false`.\n   */\n  setOpen(shouldOpen, animated = true) {\n    return menuController._setOpen(this, shouldOpen, animated);\n  }\n  focusFirstDescendant() {\n    const { el } = this;\n    const firstInput = el.querySelector(focusableQueryString);\n    if (firstInput) {\n      firstInput.focus();\n    }\n    else {\n      el.focus();\n    }\n  }\n  focusLastDescendant() {\n    const { el } = this;\n    const inputs = Array.from(el.querySelectorAll(focusableQueryString));\n    const lastInput = inputs.length > 0 ? inputs[inputs.length - 1] : null;\n    if (lastInput) {\n      lastInput.focus();\n    }\n    else {\n      el.focus();\n    }\n  }\n  trapKeyboardFocus(ev, doc) {\n    const target = ev.target;\n    if (!target) {\n      return;\n    }\n    /**\n     * If the target is inside the menu contents, let the browser\n     * focus as normal and keep a log of the last focused element.\n     */\n    if (this.el.contains(target)) {\n      this.lastFocus = target;\n    }\n    else {\n      /**\n       * Otherwise, we are about to have focus go out of the menu.\n       * Wrap the focus to either the first or last element.\n       */\n      /**\n       * Once we call `focusFirstDescendant`, another focus event\n       * will fire, which will cause `lastFocus` to be updated\n       * before we can run the code after that. We cache the value\n       * here to avoid that.\n       */\n      this.focusFirstDescendant();\n      /**\n       * If the cached last focused element is the same as the now-\n       * active element, that means the user was on the first element\n       * already and pressed Shift + Tab, so we need to wrap to the\n       * last descendant.\n       */\n      if (this.lastFocus === doc.activeElement) {\n        this.focusLastDescendant();\n      }\n    }\n  }\n  async _setOpen(shouldOpen, animated = true) {\n    // If the menu is disabled or it is currently being animated, let's do nothing\n    if (!this._isActive() || this.isAnimating || shouldOpen === this._isOpen) {\n      return false;\n    }\n    this.beforeAnimation(shouldOpen);\n    await this.loadAnimation();\n    await this.startAnimation(shouldOpen, animated);\n    /**\n     * If the animation was cancelled then\n     * return false because the operation\n     * did not succeed.\n     */\n    if (this.operationCancelled) {\n      this.operationCancelled = false;\n      return false;\n    }\n    this.afterAnimation(shouldOpen);\n    return true;\n  }\n  async loadAnimation() {\n    // Menu swipe animation takes the menu's inner width as parameter,\n    // If `offsetWidth` changes, we need to create a new animation.\n    const width = this.menuInnerEl.offsetWidth;\n    /**\n     * Menu direction animation is calculated based on the document direction.\n     * If the document direction changes, we need to create a new animation.\n     */\n    const isEndSide = isEnd(this.side);\n    if (width === this.width && this.animation !== undefined && isEndSide === this.isEndSide) {\n      return;\n    }\n    this.width = width;\n    this.isEndSide = isEndSide;\n    // Destroy existing animation\n    if (this.animation) {\n      this.animation.destroy();\n      this.animation = undefined;\n    }\n    // Create new animation\n    this.animation = await menuController._createAnimation(this.type, this);\n    if (!config.getBoolean('animated', true)) {\n      this.animation.duration(0);\n    }\n    this.animation.fill('both');\n  }\n  async startAnimation(shouldOpen, animated) {\n    const isReversed = !shouldOpen;\n    const mode = getIonMode(this);\n    const easing = mode === 'ios' ? iosEasing : mdEasing;\n    const easingReverse = mode === 'ios' ? iosEasingReverse : mdEasingReverse;\n    const ani = this.animation\n      .direction(isReversed ? 'reverse' : 'normal')\n      .easing(isReversed ? easingReverse : easing);\n    if (animated) {\n      await ani.play();\n    }\n    else {\n      ani.play({ sync: true });\n    }\n    /**\n     * We run this after the play invocation\n     * instead of using ani.onFinish so that\n     * multiple onFinish callbacks do not get\n     * run if an animation is played, stopped,\n     * and then played again.\n     */\n    if (ani.getDirection() === 'reverse') {\n      ani.direction('normal');\n    }\n  }\n  _isActive() {\n    return !this.disabled && !this.isPaneVisible;\n  }\n  canSwipe() {\n    return this.swipeGesture && !this.isAnimating && this._isActive();\n  }\n  canStart(detail) {\n    // Do not allow swipe gesture if a modal is open\n    const isModalPresented = !!document.querySelector('ion-modal.show-modal');\n    if (isModalPresented || !this.canSwipe()) {\n      return false;\n    }\n    if (this._isOpen) {\n      return true;\n    }\n    else if (menuController._getOpenSync()) {\n      return false;\n    }\n    return checkEdgeSide(window, detail.currentX, this.isEndSide, this.maxEdgeStart);\n  }\n  onWillStart() {\n    this.beforeAnimation(!this._isOpen);\n    return this.loadAnimation();\n  }\n  onStart() {\n    if (!this.isAnimating || !this.animation) {\n      assert(false, 'isAnimating has to be true');\n      return;\n    }\n    // the cloned animation should not use an easing curve during seek\n    this.animation.progressStart(true, this._isOpen ? 1 : 0);\n  }\n  onMove(detail) {\n    if (!this.isAnimating || !this.animation) {\n      assert(false, 'isAnimating has to be true');\n      return;\n    }\n    const delta = computeDelta(detail.deltaX, this._isOpen, this.isEndSide);\n    const stepValue = delta / this.width;\n    this.animation.progressStep(this._isOpen ? 1 - stepValue : stepValue);\n  }\n  onEnd(detail) {\n    if (!this.isAnimating || !this.animation) {\n      assert(false, 'isAnimating has to be true');\n      return;\n    }\n    const isOpen = this._isOpen;\n    const isEndSide = this.isEndSide;\n    const delta = computeDelta(detail.deltaX, isOpen, isEndSide);\n    const width = this.width;\n    const stepValue = delta / width;\n    const velocity = detail.velocityX;\n    const z = width / 2.0;\n    const shouldCompleteRight = velocity >= 0 && (velocity > 0.2 || detail.deltaX > z);\n    const shouldCompleteLeft = velocity <= 0 && (velocity < -0.2 || detail.deltaX < -z);\n    const shouldComplete = isOpen\n      ? isEndSide\n        ? shouldCompleteRight\n        : shouldCompleteLeft\n      : isEndSide\n        ? shouldCompleteLeft\n        : shouldCompleteRight;\n    let shouldOpen = !isOpen && shouldComplete;\n    if (isOpen && !shouldComplete) {\n      shouldOpen = true;\n    }\n    this.lastOnEnd = detail.currentTime;\n    // Account for rounding errors in JS\n    let newStepValue = shouldComplete ? 0.001 : -0.001;\n    /**\n     * stepValue can sometimes return a negative\n     * value, but you can't have a negative time value\n     * for the cubic bezier curve (at least with web animations)\n     */\n    const adjustedStepValue = stepValue < 0 ? 0.01 : stepValue;\n    /**\n     * Animation will be reversed here, so need to\n     * reverse the easing curve as well\n     *\n     * Additionally, we need to account for the time relative\n     * to the new easing curve, as `stepValue` is going to be given\n     * in terms of a linear curve.\n     */\n    newStepValue +=\n      getTimeGivenProgression([0, 0], [0.4, 0], [0.6, 1], [1, 1], clamp(0, adjustedStepValue, 0.9999))[0] || 0;\n    const playTo = this._isOpen ? !shouldComplete : shouldComplete;\n    this.animation\n      .easing('cubic-bezier(0.4, 0.0, 0.6, 1)')\n      .onFinish(() => this.afterAnimation(shouldOpen), { oneTimeCallback: true })\n      .progressEnd(playTo ? 1 : 0, this._isOpen ? 1 - newStepValue : newStepValue, 300);\n  }\n  beforeAnimation(shouldOpen) {\n    assert(!this.isAnimating, '_before() should not be called while animating');\n    // this places the menu into the correct location before it animates in\n    // this css class doesn't actually kick off any animations\n    this.el.classList.add(SHOW_MENU);\n    /**\n     * We add a tabindex here so that focus trapping\n     * still works even if the menu does not have\n     * any focusable elements slotted inside. The\n     * focus trapping utility will fallback to focusing\n     * the menu so focus does not leave when the menu\n     * is open.\n     */\n    this.el.setAttribute('tabindex', '0');\n    if (this.backdropEl) {\n      this.backdropEl.classList.add(SHOW_BACKDROP);\n    }\n    // add css class and hide content behind menu from screen readers\n    if (this.contentEl) {\n      this.contentEl.classList.add(MENU_CONTENT_OPEN);\n      /**\n       * When the menu is open and overlaying the main\n       * content, the main content should not be announced\n       * by the screenreader as the menu is the main\n       * focus. This is useful with screenreaders that have\n       * \"read from top\" gestures that read the entire\n       * page from top to bottom when activated.\n       * This should be done before the animation starts\n       * so that users cannot accidentally scroll\n       * the content while dragging a menu open.\n       */\n      this.contentEl.setAttribute('aria-hidden', 'true');\n    }\n    this.blocker.block();\n    this.isAnimating = true;\n    if (shouldOpen) {\n      this.ionWillOpen.emit();\n    }\n    else {\n      this.ionWillClose.emit();\n    }\n  }\n  afterAnimation(isOpen) {\n    var _a;\n    // keep opening/closing the menu disabled for a touch more yet\n    // only add listeners/css if it's enabled and isOpen\n    // and only remove listeners/css if it's not open\n    // emit opened/closed events\n    this._isOpen = isOpen;\n    this.isAnimating = false;\n    if (!this._isOpen) {\n      this.blocker.unblock();\n    }\n    if (isOpen) {\n      // emit open event\n      this.ionDidOpen.emit();\n      /**\n       * Move focus to the menu to prepare focus trapping, as long as\n       * it isn't already focused. Use the host element instead of the\n       * first descendant to avoid the scroll position jumping around.\n       */\n      const focusedMenu = (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.closest('ion-menu');\n      if (focusedMenu !== this.el) {\n        this.el.focus();\n      }\n      // start focus trapping\n      document.addEventListener('focus', this.handleFocus, true);\n    }\n    else {\n      // remove css classes and unhide content from screen readers\n      this.el.classList.remove(SHOW_MENU);\n      /**\n       * Remove tabindex from the menu component\n       * so that is cannot be tabbed to.\n       */\n      this.el.removeAttribute('tabindex');\n      if (this.contentEl) {\n        this.contentEl.classList.remove(MENU_CONTENT_OPEN);\n        /**\n         * Remove aria-hidden so screen readers\n         * can announce the main content again\n         * now that the menu is not the main focus.\n         */\n        this.contentEl.removeAttribute('aria-hidden');\n      }\n      if (this.backdropEl) {\n        this.backdropEl.classList.remove(SHOW_BACKDROP);\n      }\n      if (this.animation) {\n        this.animation.stop();\n      }\n      // emit close event\n      this.ionDidClose.emit();\n      // undo focus trapping so multiple menus don't collide\n      document.removeEventListener('focus', this.handleFocus, true);\n    }\n  }\n  updateState() {\n    const isActive = this._isActive();\n    if (this.gesture) {\n      this.gesture.enable(isActive && this.swipeGesture);\n    }\n    /**\n     * If the menu is disabled but it is still open\n     * then we should close the menu immediately.\n     * Additionally, if the menu is in the process\n     * of animating {open, close} and the menu is disabled\n     * then it should still be closed immediately.\n     */\n    if (!isActive) {\n      /**\n       * It is possible to disable the menu while\n       * it is mid-animation. When this happens, we\n       * need to set the operationCancelled flag\n       * so that this._setOpen knows to return false\n       * and not run the \"afterAnimation\" callback.\n       */\n      if (this.isAnimating) {\n        this.operationCancelled = true;\n      }\n      /**\n       * If the menu is disabled then we should\n       * forcibly close the menu even if it is open.\n       */\n      this.afterAnimation(false);\n    }\n  }\n  render() {\n    const { type, disabled, isPaneVisible, inheritedAttributes, side } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { role: \"navigation\", \"aria-label\": inheritedAttributes['aria-label'] || 'menu', class: {\n        [mode]: true,\n        [`menu-type-${type}`]: true,\n        'menu-enabled': !disabled,\n        [`menu-side-${side}`]: true,\n        'menu-pane-visible': isPaneVisible,\n      } }, h(\"div\", { class: \"menu-inner\", part: \"container\", ref: (el) => (this.menuInnerEl = el) }, h(\"slot\", null)), h(\"ion-backdrop\", { ref: (el) => (this.backdropEl = el), class: \"menu-backdrop\", tappable: false, stopPropagation: false, part: \"backdrop\" })));\n  }\n  static get is() { return \"ion-menu\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"menu.ios.scss\"],\n      \"md\": [\"menu.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"menu.ios.css\"],\n      \"md\": [\"menu.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"contentId\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The `id` of the main content. When using\\na router this is typically `ion-router-outlet`.\\nWhen not using a router, this is typically\\nyour main view's `ion-content`. This is not the\\nid of the `ion-content` inside of your `ion-menu`.\"\n        },\n        \"attribute\": \"content-id\",\n        \"reflect\": true\n      },\n      \"menuId\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"An id for the menu.\"\n        },\n        \"attribute\": \"menu-id\",\n        \"reflect\": true\n      },\n      \"type\": {\n        \"type\": \"string\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The display type of the menu.\\nAvailable options: `\\\"overlay\\\"`, `\\\"reveal\\\"`, `\\\"push\\\"`.\"\n        },\n        \"attribute\": \"type\",\n        \"reflect\": false\n      },\n      \"disabled\": {\n        \"type\": \"boolean\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the menu is disabled.\"\n        },\n        \"attribute\": \"disabled\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"side\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Side\",\n          \"resolved\": \"\\\"end\\\" | \\\"start\\\"\",\n          \"references\": {\n            \"Side\": {\n              \"location\": \"import\",\n              \"path\": \"./menu-interface\",\n              \"id\": \"src/components/menu/menu-interface.ts::Side\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Which side of the view the menu should be placed.\"\n        },\n        \"attribute\": \"side\",\n        \"reflect\": true,\n        \"defaultValue\": \"'start'\"\n      },\n      \"swipeGesture\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, swiping the menu is enabled.\"\n        },\n        \"attribute\": \"swipe-gesture\",\n        \"reflect\": false,\n        \"defaultValue\": \"true\"\n      },\n      \"maxEdgeStart\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The edge threshold for dragging the menu open.\\nIf a drag/swipe happens over this value, the menu is not triggered.\"\n        },\n        \"attribute\": \"max-edge-start\",\n        \"reflect\": false,\n        \"defaultValue\": \"50\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"isPaneVisible\": {},\n      \"isEndSide\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"ionWillOpen\",\n        \"name\": \"ionWillOpen\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the menu is about to be opened.\"\n        },\n        \"complexType\": {\n          \"original\": \"void\",\n          \"resolved\": \"void\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"ionWillClose\",\n        \"name\": \"ionWillClose\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the menu is about to be closed.\"\n        },\n        \"complexType\": {\n          \"original\": \"void\",\n          \"resolved\": \"void\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"ionDidOpen\",\n        \"name\": \"ionDidOpen\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the menu is open.\"\n        },\n        \"complexType\": {\n          \"original\": \"void\",\n          \"resolved\": \"void\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"ionDidClose\",\n        \"name\": \"ionDidClose\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the menu is closed.\"\n        },\n        \"complexType\": {\n          \"original\": \"void\",\n          \"resolved\": \"void\",\n          \"references\": {}\n        }\n      }, {\n        \"method\": \"ionMenuChange\",\n        \"name\": \"ionMenuChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"Emitted when the menu state is changed.\"\n        },\n        \"complexType\": {\n          \"original\": \"MenuChangeEventDetail\",\n          \"resolved\": \"MenuChangeEventDetail\",\n          \"references\": {\n            \"MenuChangeEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"./menu-interface\",\n              \"id\": \"src/components/menu/menu-interface.ts::MenuChangeEventDetail\"\n            }\n          }\n        }\n      }];\n  }\n  static get methods() {\n    return {\n      \"isOpen\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<boolean>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\",\n              \"id\": \"global::Promise\"\n            }\n          },\n          \"return\": \"Promise<boolean>\"\n        },\n        \"docs\": {\n          \"text\": \"Returns `true` is the menu is open.\",\n          \"tags\": []\n        }\n      },\n      \"isActive\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<boolean>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\",\n              \"id\": \"global::Promise\"\n            }\n          },\n          \"return\": \"Promise<boolean>\"\n        },\n        \"docs\": {\n          \"text\": \"Returns `true` is the menu is active.\\n\\nA menu is active when it can be opened or closed, meaning it's enabled\\nand it's not part of a `ion-split-pane`.\",\n          \"tags\": []\n        }\n      },\n      \"open\": {\n        \"complexType\": {\n          \"signature\": \"(animated?: boolean) => Promise<boolean>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\",\n              \"id\": \"global::Promise\"\n            }\n          },\n          \"return\": \"Promise<boolean>\"\n        },\n        \"docs\": {\n          \"text\": \"Opens the menu. If the menu is already open or it can't be opened,\\nit returns `false`.\",\n          \"tags\": []\n        }\n      },\n      \"close\": {\n        \"complexType\": {\n          \"signature\": \"(animated?: boolean) => Promise<boolean>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\",\n              \"id\": \"global::Promise\"\n            }\n          },\n          \"return\": \"Promise<boolean>\"\n        },\n        \"docs\": {\n          \"text\": \"Closes the menu. If the menu is already closed or it can't be closed,\\nit returns `false`.\",\n          \"tags\": []\n        }\n      },\n      \"toggle\": {\n        \"complexType\": {\n          \"signature\": \"(animated?: boolean) => Promise<boolean>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\",\n              \"id\": \"global::Promise\"\n            }\n          },\n          \"return\": \"Promise<boolean>\"\n        },\n        \"docs\": {\n          \"text\": \"Toggles the menu. If the menu is already open, it will try to close, otherwise it will try to open it.\\nIf the operation can't be completed successfully, it returns `false`.\",\n          \"tags\": []\n        }\n      },\n      \"setOpen\": {\n        \"complexType\": {\n          \"signature\": \"(shouldOpen: boolean, animated?: boolean) => Promise<boolean>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }, {\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\",\n              \"id\": \"global::Promise\"\n            }\n          },\n          \"return\": \"Promise<boolean>\"\n        },\n        \"docs\": {\n          \"text\": \"Opens or closes the button.\\nIf the operation can't be completed successfully, it returns `false`.\",\n          \"tags\": []\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"type\",\n        \"methodName\": \"typeChanged\"\n      }, {\n        \"propName\": \"disabled\",\n        \"methodName\": \"disabledChanged\"\n      }, {\n        \"propName\": \"side\",\n        \"methodName\": \"sideChanged\"\n      }, {\n        \"propName\": \"swipeGesture\",\n        \"methodName\": \"swipeGestureChanged\"\n      }];\n  }\n  static get listeners() {\n    return [{\n        \"name\": \"ionSplitPaneVisible\",\n        \"method\": \"onSplitPaneChanged\",\n        \"target\": \"body\",\n        \"capture\": false,\n        \"passive\": false\n      }, {\n        \"name\": \"click\",\n        \"method\": \"onBackdropClick\",\n        \"target\": undefined,\n        \"capture\": true,\n        \"passive\": false\n      }, {\n        \"name\": \"keydown\",\n        \"method\": \"onKeydown\",\n        \"target\": undefined,\n        \"capture\": false,\n        \"passive\": false\n      }];\n  }\n}\nconst computeDelta = (deltaX, isOpen, isEndSide) => {\n  return Math.max(0, isOpen !== isEndSide ? -deltaX : deltaX);\n};\nconst checkEdgeSide = (win, posX, isEndSide, maxEdgeStart) => {\n  if (isEndSide) {\n    return posX >= win.innerWidth - maxEdgeStart;\n  }\n  else {\n    return posX <= maxEdgeStart;\n  }\n};\nconst SHOW_MENU = 'show-menu';\nconst SHOW_BACKDROP = 'show-backdrop';\nconst MENU_CONTENT_OPEN = 'menu-content-open';\n"],"mappings":"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"}