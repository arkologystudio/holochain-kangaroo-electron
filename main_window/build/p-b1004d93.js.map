{"version":3,"names":["createLockController","waitPromise","lock","async","p","resolve","Promise","r","undefined"],"sources":["../../node_modules/@ionic/core/dist/collection/utils/lock-controller.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * Creates a lock controller.\n *\n * Claiming a lock means that nothing else can acquire the lock until it is released.\n * This can momentarily prevent execution of code that needs to wait for the earlier code to finish.\n * For example, this can be used to prevent multiple transitions from occurring at the same time.\n */\nexport const createLockController = () => {\n  let waitPromise;\n  /**\n   * When lock() is called, the lock is claimed.\n   * Once a lock has been claimed, it cannot be claimed again until it is released.\n   * When this function gets resolved, the lock is released, allowing it to be claimed again.\n   *\n   * @example ```tsx\n   * const unlock = await this.lockController.lock();\n   * // do other stuff\n   * unlock();\n   * ```\n   */\n  const lock = async () => {\n    const p = waitPromise;\n    let resolve;\n    waitPromise = new Promise((r) => (resolve = r));\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  };\n  return {\n    lock,\n  };\n};\n"],"mappings":";;;AAUY,MAACA,EAAuB,KAClC,IAAIC,EAYJ,MAAMC,EAAOC,UACX,MAAMC,EAAIH,EACV,IAAII,EACJJ,EAAc,IAAIK,SAASC,GAAOF,EAAUE,IAC5C,GAAIH,IAAMI,UAAW,OACbJ,CACZ,CACI,OAAOC,CAAO,EAEhB,MAAO,CACLH,OACD,S"}